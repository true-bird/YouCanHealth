package com.matnagu.myHell.comment;

import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.matnagu.myHell.comment.dto.CommentDto;
import com.matnagu.myHell.comment.service.CommentServiceImpl;
import com.matnagu.myHell.community.service.CommunityServiceImpl;
import com.matnagu.myHell.user.service.UserServiceImpl;

@Controller
public class CommentController {

	@Autowired
	private CommentServiceImpl commentServiceImpl;
	@Autowired
	private CommunityServiceImpl communityServiceImpl;
	@Autowired
	private UserServiceImpl UserServiceImpl;
	
	@RequestMapping(value = "/dat")
	public String selectCommentAllList(Model model) {
		List<CommentDto> commentList = commentServiceImpl.selectCommentAllList(23);
		model.addAttribute("list",commentList);
		return "dat";
	}
	
	// 댓글 추가
	@RequestMapping(value = "/community/commentset")
	public ModelAndView insertCommentset(@RequestParam HashMap<String,String> paramMap, RedirectAttributes redirectAttributes) {
		commentServiceImpl.insertComment(paramMap);
		redirectAttributes.addAttribute("seq", paramMap.get("communitySeq"));
		ModelAndView mv = new ModelAndView("redirect:/community/readPost");
		return mv;
	}
	
	// 댓글 삭제
	@RequestMapping(value = "/community/CommentDelet") // 뎃글 삭제
	public ModelAndView doCommentDelet(@RequestParam("seq") int seq,@RequestParam("userseq") int userseq ,Model model,HttpServletRequest request) {

		commentServiceImpl.deleteComment(userseq);
		communityDto communityDto = communityServiceImpl.selectCommunity(seq); // 해당 글 내용 담기
		communityServiceImpl.updateHit(seq);
		model.addAttribute("communityDto", communityDto);
		HttpSession session=request.getSession();
		//System.out.println("myId3=" + myId);
		UserDto userDto = UserServiceImpl.selectUserId((String)session.getAttribute("myId2")); //세션 정보를 받아서 같은 아이디 정보 가져오기
		model.addAttribute("userDto", userDto);
		List<CommentDto> commentList = commentServiceImpl.selectCommentAllList(seq);// 글에 해당하는 댓글 담기

		if (commentList.size() > 0) { // 댓글이 0이면 담지 않는다.
			model.addAttribute("list", commentList);
		}

		ModelAndView mv = new ModelAndView("community/Content");
		return mv;
	}

}
